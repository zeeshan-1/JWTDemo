{"version":3,"sources":["logo.svg","Components/UserForm.js","Components/UserRegistrationForm.js","Components/UserAuthenticationForm.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","minWidth","smMargin","UserForm","React","memo","buttonLabel","onSubmitHandler","cssClasses","useState","enteredUserName","setEnteredUserName","enteredUserPassword","setEnteredUserPassword","useEffect","className","noValidate","autoComplete","onSubmit","event","preventDefault","userName","userPassword","TextField","name","variant","label","defaultValue","onChange","target","value","type","Button","color","size","UserRegistrationForm","props","registerUser","useCallback","userData","console","log","data","username","password","fetch","method","body","JSON","stringify","headers","Authorization","parse","localStorage","getItem","jwtToken","then","response","json","result","currentUser","id","email","isRegistered","hasError","errorMessages","catch","error","authenticateUser","isAuthenticated","setItem","setIsAuthenticated","App","setIsRegistered","Container","onRegister","UserAuthenticationForm","onAuthenticate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5aa05a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport { Button, TextField, makeStyles } from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n// customizing the default material-ui styles\r\n// by using makeStyles hook technique\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      minWidth: 230,\r\n    },\r\n  },\r\n  smMargin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n// User Form component\r\nconst UserForm = React.memo(({ buttonLabel, onSubmitHandler }) => {\r\n  // State Variables\r\n  const cssClasses = useStyles();\r\n  const [enteredUserName, setEnteredUserName] = useState(\"\");\r\n  const [enteredUserPassword, setEnteredUserPassword] = useState(\"\");\r\n\r\n  // Member Variables..\r\n\r\n  // Lifecycle Hooks...\r\n  useEffect(() => {\r\n    // create side effects...\r\n  }, []);\r\n\r\n  // Event Handlers...\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Passing the state object to the function\r\n    // provided as props. By doing this the consumer\r\n    // of this form can handle the submission with\r\n    // custom logic/behaviour outside this component.\r\n    onSubmitHandler({\r\n      userName: enteredUserName,\r\n      userPassword: enteredUserPassword,\r\n    });\r\n  };\r\n\r\n  // Member Functions...\r\n\r\n  // Render block....\r\n  return (\r\n    <form\r\n      className={cssClasses.root}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n      onSubmit={submitHandler}\r\n    >\r\n      <div>\r\n        <div>\r\n          <TextField\r\n            name=\"UserName\"\r\n            variant=\"outlined\"\r\n            label=\"User Name/Email\"\r\n            defaultValue={enteredUserName}\r\n            autoComplete=\"current-username\" // Added to avoid warnings\r\n            onChange={(event) => {\r\n              setEnteredUserName(event.target.value);\r\n            }}\r\n          ></TextField>\r\n        </div>\r\n        <div>\r\n          <TextField\r\n            name=\"Password\"\r\n            type=\"password\"\r\n            variant=\"outlined\"\r\n            label=\"Password\"\r\n            autoComplete=\"current-password\" // Added to avoid warnings\r\n            defaultValue={enteredUserPassword}\r\n            onChange={(event) => {\r\n              setEnteredUserPassword(event.target.value);\r\n            }}\r\n          ></TextField>\r\n        </div>\r\n        <div>\r\n          <Button\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n          >\r\n            {buttonLabel}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n});\r\n\r\n// Making all the props type safe by declaring their types\r\nUserForm.propTypes = {\r\n  buttonLabel: PropTypes.string,\r\n  onSubmitHandler: PropTypes.func,\r\n};\r\nexport default UserForm;\r\n","import React, { useCallback } from \"react\";\r\nimport UserForm from \"./UserForm\";\r\nimport currentUser from \"../Models/UserData\";\r\n\r\nconst UserRegistrationForm = (props) => {\r\n  // State Variables\r\n\r\n  // Member Variables..\r\n  // Lifecycle Hooks...\r\n  // Event Handlers...\r\n\r\n  const registerUser = useCallback((userData) => {\r\n    // Call user api here with JWT\r\n    console.log(\"registerUser is called..\", userData);\r\n    let data = {\r\n      username: userData.userName,\r\n      password: userData.userPassword,\r\n    };\r\n\r\n    fetch(\"http://localhost:6060/users/register\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        Authorization: `Bearer ${\r\n          JSON.parse(localStorage.getItem(\"currentUser\")).jwtToken\r\n        }`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        response.json().then((result) => {\r\n          console.log(\"returned result = \", result);\r\n\r\n          currentUser = JSON.stringify({\r\n            id: result.id,\r\n            userName: result.username,\r\n            email: result.email,\r\n            isRegistered: result.id > 0 && result.hasError ? true : false,\r\n            jwtToken: result.jwtToken,\r\n            hasError: result.hasError,\r\n            errorMessages: result.errorMessages,\r\n          });\r\n\r\n          // changing the state of the parent component to\r\n          // toggle between the registration and authentication\r\n          // form components.\r\n          // props.setIsRegistered(currentUser.isRegistered);\r\n        });\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(\"Error = \", error.data);\r\n      });\r\n  }, []);\r\n  // Member Functions...\r\n  // Render block....\r\n  return (\r\n    <div>\r\n      <UserForm\r\n        buttonLabel=\"Register\"\r\n        onSubmitHandler={registerUser}\r\n      ></UserForm>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserRegistrationForm;\r\n","import React, { useCallback } from \"react\";\r\nimport UserForm from \"./UserForm\";\r\nimport currentUser from \"../Models/UserData\";\r\n\r\nconst UserRegistrationForm = (props) => {\r\n  // State Variables\r\n\r\n  // Member Variables..\r\n  // Lifecycle Hooks...\r\n  // Event Handlers...\r\n  const authenticateUser = useCallback((userData) => {\r\n    // Call user api here with JWT\r\n    console.log(\"authenticateUser is called..\", userData);\r\n    let data = {\r\n      username: userData.userName,\r\n      password: userData.userPassword,\r\n    };\r\n\r\n    fetch(\"http://localhost:6060/users/authenticate\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n      .then((response) => {\r\n        response.json().then((result) => {\r\n          console.log(\"returned result = \", result);\r\n\r\n          currentUser = JSON.stringify({\r\n            id: result.id,\r\n            userName: result.username,\r\n            email: result.email,\r\n            isRegistered: result.id > 0 ? true : false,\r\n            isAuthenticated: result.hasError,\r\n            jwtToken: result.jwtToken,\r\n            hasError: result.hasError,\r\n            errorMessages: result.errorMessages,\r\n          });\r\n          // Stroing the the registered user in local storage\r\n          localStorage.setItem(\"currentUser\", currentUser);\r\n\r\n          // changing the state of the parent component to\r\n          // toggle between the registration and authentication\r\n          // form components.\r\n          props.setIsAuthenticated(currentUser.isAuthenticated);\r\n        });\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(\"Error = \", error.data);\r\n      });\r\n  }, []);\r\n  // Member Functions...\r\n  // Render block....\r\n  return (\r\n    <div>\r\n      <UserForm\r\n        buttonLabel=\"Login\"\r\n        onSubmitHandler={authenticateUser}\r\n      ></UserForm>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserRegistrationForm;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport UserRegistrationForm from \"./Components/UserRegistrationForm\";\nimport UserAuthenticationForm from \"./Components/UserAuthenticationForm\";\n\nfunction App() {\n  const [isRegistered, setIsRegistered] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {}, [isAuthenticated, isRegistered]);\n\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n\n      <Container>\n        {!isAuthenticated ? (\n          <UserAuthenticationForm\n            onAuthenticate={setIsAuthenticated}\n          ></UserAuthenticationForm>\n        ) : (\n          <UserRegistrationForm\n            onRegister={setIsRegistered}\n          ></UserRegistrationForm>\n        )}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}